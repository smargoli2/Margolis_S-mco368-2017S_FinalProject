#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SalesTracking
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "Sales")]
    public partial class DataClasses1DataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertCustomer(Customer instance);
        partial void UpdateCustomer(Customer instance);
        partial void DeleteCustomer(Customer instance);
        partial void InsertOrder(Order instance);
        partial void UpdateOrder(Order instance);
        partial void DeleteOrder(Order instance);
        partial void InsertItem(Item instance);
        partial void UpdateItem(Item instance);
        partial void DeleteItem(Item instance);
        #endregion

        public DataClasses1DataContext() :
                base(global::SalesTracking.Properties.Settings.Default.SalesConnectionString, mappingSource)
        {
            OnCreated();
        }

        public DataClasses1DataContext(string connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataClasses1DataContext(System.Data.IDbConnection connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Customer> Customers
        {
            get
            {
                return this.GetTable<Customer>();
            }
        }

        public System.Data.Linq.Table<Order> Orders
        {
            get
            {
                return this.GetTable<Order>();
            }
        }

        public System.Data.Linq.Table<Item> Items
        {
            get
            {
                return this.GetTable<Item>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Customer")]
    public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Username;

        private string _password;

        private string _FirstName;

        private string _LastName;

        private string _CustAddress;

        private decimal _Balance;

        private decimal _Credit;

        private EntitySet<Order> _Orders;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnpasswordChanging(string value);
        partial void OnpasswordChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnCustAddressChanging(string value);
        partial void OnCustAddressChanged();
        partial void OnBalanceChanging(decimal value);
        partial void OnBalanceChanged();
        #endregion

        public Customer()
        {
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Username", DbType = "VarChar(20) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if ((this._Username != value))
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_password", DbType = "VarChar(20) NOT NULL", CanBeNull = false)]
        public string password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnpasswordChanging(value);
                    this.SendPropertyChanging();
                    this._password = value;
                    this.SendPropertyChanged("password");
                    this.OnpasswordChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FirstName", DbType = "VarChar(20) NOT NULL", CanBeNull = false)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if ((this._FirstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LastName", DbType = "VarChar(20) NOT NULL", CanBeNull = false)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if ((this._LastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CustAddress", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
        public string CustAddress
        {
            get
            {
                return this._CustAddress;
            }
            set
            {
                if ((this._CustAddress != value))
                {
                    this.OnCustAddressChanging(value);
                    this.SendPropertyChanging();
                    this._CustAddress = value;
                    this.SendPropertyChanged("CustAddress");
                    this.OnCustAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Balance", DbType = "Decimal(18,0) NOT NULL")]
        public decimal Balance
        {
            get
            {
                return this._Balance;
            }
            set
            {
                if ((this._Balance != value))
                {
                    this.OnBalanceChanging(value);
                    this.SendPropertyChanging();
                    this._Balance = value;
                    this.SendPropertyChanged("Balance");
                    this.OnBalanceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Credit", DbType = "Decimal(18,0) NULL")]
        public decimal Credit
        {
            get
            {
                return this._Credit;
            }
            set
            {
                if ((this._Credit != value))
                {
                    this.SendPropertyChanging();
                    this._Credit = value;
                    this.SendPropertyChanged("Credit");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Customer_Order", Storage = "_Orders", ThisKey = "Username", OtherKey = "CustID")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.Customer = this;
        }

        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.Customer = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Orders")]
    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _OrderID;

        private string _CustID;

        private System.DateTime _orderDate;

        private decimal _TotalPaid;

        private bool _paid;

        private int _ItemID;

        private EntityRef<Customer> _Customer;

        private EntityRef<Item> _Item;

        private int _Quantity;

        private decimal _OrderTotal;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnCustIDChanging(string value);
        partial void OnCustIDChanged();
        partial void OnorderDateChanging(System.DateTime value);
        partial void OnorderDateChanged();
        partial void OnTotalPaidChanging(decimal value);
        partial void OnTotalPaidChanged();
        partial void OnpaidChanging(bool value);
        partial void OnpaidChanged();
        partial void OnItemIDChanging(System.Nullable<int> value);
        partial void OnItemIDChanged();
        #endregion

        public Order()
        {
            this._Customer = default(EntityRef<Customer>);
            this._Item = default(EntityRef<Item>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if ((this._OrderID != value))
                {
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CustID", DbType = "VarChar(20) NOT NULL", CanBeNull = false)]
        public string CustID
        {
            get
            {
                return this._CustID;
            }
            set
            {
                if ((this._CustID != value))
                {
                    if (this._Customer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCustIDChanging(value);
                    this.SendPropertyChanging();
                    this._CustID = value;
                    this.SendPropertyChanged("CustID");
                    this.OnCustIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_orderDate", DbType = "Date NOT NULL")]
        public System.DateTime orderDate
        {
            get
            {
                return this._orderDate;
            }
            set
            {
                if ((this._orderDate != value))
                {
                    this.OnorderDateChanging(value);
                    this.SendPropertyChanging();
                    this._orderDate = value;
                    this.SendPropertyChanged("orderDate");
                    this.OnorderDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalPaid", DbType = "Decimal(18,0) NOT NULL")]
        public decimal TotalPaid
        {
            get
            {
                return this._TotalPaid;
            }
            set
            {
                if ((this._TotalPaid != value))
                {
                    this.OnTotalPaidChanging(value);
                    this.SendPropertyChanging();
                    this._TotalPaid = value;
                    this.SendPropertyChanged("TotalPaid");
                    this.OnTotalPaidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_paid", DbType = "Bit NOT NULL")]
        public bool paid
        {
            get
            {
                return this._paid;
            }
            set
            {
                if ((this._paid != value))
                {
                    this.OnpaidChanging(value);
                    this.SendPropertyChanging();
                    this._paid = value;
                    this.SendPropertyChanged("paid");
                    this.OnpaidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemID", DbType = "Int")]
        public int ItemID
        {
            get
            {
                return this._ItemID;
            }
            set
            {
                if ((this._ItemID != value))
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._ItemID = value;
                    this.SendPropertyChanged("ItemID");
                    this.OnItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Customer_Order", Storage = "_Customer", ThisKey = "CustID", OtherKey = "Username", IsForeignKey = true)]
        public Customer Customer
        {
            get
            {
                return this._Customer.Entity;
            }
            set
            {
                Customer previousValue = this._Customer.Entity;
                if (((previousValue != value)
                            || (this._Customer.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Customer.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Customer.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                        this._CustID = value.Username;
                    }
                    else
                    {
                        this._CustID = default(string);
                    }
                    this.SendPropertyChanged("Customer");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Item_Order", Storage = "_Item", ThisKey = "ItemID", OtherKey = "ItemID", IsForeignKey = true)]
        public Item Item
        {
            get
            {
                return this._Item.Entity;
            }
            set
            {
                Item previousValue = this._Item.Entity;
                if (((previousValue != value)
                            || (this._Item.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Item.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Item.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                        this._ItemID = value.ItemID;
                    }
                    else
                    {
                        this._ItemID = default(int);
                    }
                    this.SendPropertyChanged("Item");
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Quantity", DbType = "Int")]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if ((this._Quantity != value))
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("ItemID");
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderTotal", DbType = "Decimal(18,0) NOT NULL")]
        public decimal OrderTotal
        {
            get
            {
                return this._OrderTotal;
            }
            set
            {
                if ((this._OrderTotal != value))
                {
                    this.SendPropertyChanging();
                    this._OrderTotal = value;
                    this.SendPropertyChanged("OrderTotal");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Items")]
    public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ItemID;

        private string _ItemDesc;

        private decimal _ItemPrice;

        private EntitySet<Order> _Orders;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnItemIDChanging(int value);
        partial void OnItemIDChanged();
        partial void OnItemDescChanging(string value);
        partial void OnItemDescChanged();
        partial void OnItemPriceChanging(decimal value);
        partial void OnItemPriceChanged();
        #endregion

        public Item()
        {
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ItemID
        {
            get
            {
                return this._ItemID;
            }
            set
            {
                if ((this._ItemID != value))
                {
                    this.OnItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._ItemID = value;
                    this.SendPropertyChanged("ItemID");
                    this.OnItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemDesc", DbType = "VarChar(20) NOT NULL", CanBeNull = false)]
        public string ItemDesc
        {
            get
            {
                return this._ItemDesc;
            }
            set
            {
                if ((this._ItemDesc != value))
                {
                    this.OnItemDescChanging(value);
                    this.SendPropertyChanging();
                    this._ItemDesc = value;
                    this.SendPropertyChanged("ItemDesc");
                    this.OnItemDescChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemPrice", DbType = "Money NOT NULL")]
        public decimal ItemPrice
        {
            get
            {
                return this._ItemPrice;
            }
            set
            {
                if ((this._ItemPrice != value))
                {
                    this.OnItemPriceChanging(value);
                    this.SendPropertyChanging();
                    this._ItemPrice = value;
                    this.SendPropertyChanged("ItemPrice");
                    this.OnItemPriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Item_Order", Storage = "_Orders", ThisKey = "ItemID", OtherKey = "ItemID")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.Item = this;
        }

        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.Item = null;
        }
    }
}
#pragma warning restore 1591
